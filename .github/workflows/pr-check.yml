name: PR Check — version bump

on:
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build:  # important: le check s'appelle 'build' pour correspondre à tes branch rules
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq dpkg

      - name: Get latest release tag
        id: latest
        env:
          TOKEN: ${{ github.token }}
        run: |
          set -e
          LATEST_TAG=$(curl -s -H "Authorization: token ${TOKEN}" \
            https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name // empty')
          if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" = "null" ]; then LATEST_TAG="0.0.0"; fi
          LATEST_VERSION=$(printf "%s" "$LATEST_TAG" | sed -E 's/^[^0-9]*//')
          echo "LATEST_VERSION=$LATEST_VERSION"
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV

      - name: Read version.txt
        id: read_version
        run: |
          set -e
          [ -f version.txt ] || { echo "❌ version.txt introuvable à la racine"; exit 1; }
          RAW_VERSION=$(head -n1 version.txt | tr -d '\r' | xargs)
          [ -n "$RAW_VERSION" ] || { echo "❌ version.txt est vide"; exit 1; }
          VERSION=$(printf "%s" "$RAW_VERSION" | sed -E 's/^[^0-9]*//')
          echo "Version PR: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Compare versions (must be > latest)
        run: |
          echo "Comparaison: NEW=${{ env.VERSION }} ; LATEST=${{ env.LATEST_VERSION }}"
          if dpkg --compare-versions "${{ env.VERSION }}" gt "${{ env.LATEST_VERSION }}"; then
            echo "✅ Version plus élevée → OK"
          else
            echo "❌ Version ${{ env.VERSION }} n’est pas > ${{ env.LATEST_VERSION }}"
            exit 1
          fi
